// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  // Necessary for Next auth
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Branch {
  // Developer defined
  id          String  @id @default(cuid())
  name        String
  shortName   String
  description String?
  location    String?
  // Relational fields
  // 1-
  // n-
  students    User[]
}

model Club {
  // Developer defined
  id          String  @id @default(cuid())
  name        String
  description String
  // Relational fields
  // 1-
  presidentId String
  president   User    @relation(fields: [presidentId], references: [id], onDelete: Cascade)
  // n-
  members     User[]  @relation("ClubMembers")
  events      Event[]
}

model Event {
  // Developer defined
  id            String     @id @default(cuid())
  name          String
  description   String
  bannerImage   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  fees          Int        @default(0)
  noOfRounds    Int        @default(1)
  eventType     EventType  @default(INDIVIDUAL)
  venue         String?
  minTeamSize   Int        @default(1)
  maxTeamSize   Int        @default(1)
  maxTeams      Int?
  eventState    EventState @default(DRAFT)
  startDateTime DateTime
  endDateTime   DateTime
  // Relations
  // 1-
  clubId        String
  club          Club       @relation(fields: [clubId], references: [id], onDelete: Cascade)
  // n-
  organisers    User[]     @relation("EventOrganisers")
}

model Session {
  // Necessary for Next auth
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // Necessary for Next auth
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  // Developer defined
  usn              String?   @unique
  role             Role      @default(USER)
  bio              String?
  phoneNumber      String?
  joinedOn         DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  // Relational fields
  // 1-
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  // n-
  presidentOf      Club[]
  clubs            Club[]    @relation("ClubMembers")
  organisingEvents Event[]   @relation("EventOrganisers")
}

model VerificationToken {
  // Necessary for Next auth
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier, token])
}

// Enum Types
enum EventState {
  DRAFT
  SUBMITTED
  PUBLISHED
  LIVE
  COMPLETED
  CANCELLED
}

enum EventType {
  INDIVIDUAL
  TEAM
}

enum Role {
  ADMIN
  PRESIDENT
  ORGANISER
  USER
}
