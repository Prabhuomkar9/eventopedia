// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  usn             String?   @unique
  email           String    @unique
  emailVerified   DateTime?
  role            Role      @default(USER)
  image           String?
  bio             String?
  phoneNumber     String?
  joinedOn        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // Relational Fields
  // 1-
  branchId        String?   @db.ObjectId
  branch          Branch?   @relation(fields: [branchId], references: [id])
  presidentOf     Club?
  // n-
  accounts        Account[]
  sessions        Session[]
  clubId          String[]  @db.ObjectId
  club            Club[]    @relation("rClubMember", fields: [clubId], references: [id])
  createdEventIds String[]  @db.ObjectId
  createdEvents   Event[]   @relation(fields: [createdEventIds], references: [id])
}

model Branch {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  shortName   String
  description String?
  // Relational Fields
  // n-
  students    User[]
}

model Club {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  // Relational Fields
  // 1-
  presidentId String   @unique @db.ObjectId
  president   User     @relation(fields: [presidentId], references: [id], onUpdate: NoAction)
  // n-
  memberIds   String[] @db.ObjectId
  members     User[]   @relation("rClubMember", fields: [memberIds], references: [id])
  events      Event[]
}

model Event {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  bannerImage   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  fees          Int        @default(0)
  noOfRounds    Int        @default(1)
  eventType     EventType  @default(INDIVIDUAL)
  venue         String?
  minTeamSize   Int        @default(1)
  maxTeamSize   Int        @default(1)
  maxTeams      Int?
  state         EventState @default(DRAFT)
  startDateTime DateTime
  endDateTime   DateTime
  // Relational Fields
  // 1-
  clubId        String     @db.ObjectId
  club          Club       @relation(fields: [clubId], references: [id])
  // n-
  organiserIds  String[]   @db.ObjectId
  organisers    User[]     @relation(fields: [organiserIds], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum Types
enum Role {
  ADMIN
  PRESIDENT
  ORGANISER
  USER
}

enum EventType {
  INDIVIDUAL
  TEAM
}

enum EventState {
  DRAFT
  SUBMITTED
  PUBLISHED
  LIVE
  COMPLETED
  CANCELLED
}
